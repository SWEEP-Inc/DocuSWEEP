"use strict";(self.webpackChunksweep_docs_website=self.webpackChunksweep_docs_website||[]).push([[8263],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),f=r,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return n?o.createElement(m,i(i({ref:t},s),{},{components:n})):o.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2515:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=n(7462),r=(n(7294),n(3905));const a={},i="Creating executables",l={unversionedId:"Code Examples/creating-executables",id:"Code Examples/creating-executables",title:"Creating executables",description:"Add a function definition",source:"@site/docs/Code Examples/creating-executables.md",sourceDirName:"Code Examples",slug:"/Code Examples/creating-executables",permalink:"/Code Examples/creating-executables",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add a workflow definition",permalink:"/Code Examples/add-a-workflow-definition"},next:{title:"Launch and monitor the workflow",permalink:"/Code Examples/launch-and-monitor-the-workflow"}},c={},d=[{value:"Add a function definition",id:"add-a-function-definition",level:3},{value:"Step 1: Write the function and compress it",id:"step-1-write-the-function-and-compress-it",level:4},{value:"Step 2: Upload the function definition to SWEEP",id:"step-2-upload-the-function-definition-to-sweep",level:4},{value:"Add a container definition",id:"add-a-container-definition",level:3},{value:"Step 1: Create a docker image and compress it",id:"step-1-create-a-docker-image-and-compress-it",level:4},{value:"Step 2: Upload the container definition to SWEEP",id:"step-2-upload-the-container-definition-to-sweep",level:4}],s={toc:d},p="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,o.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-executables"},"Creating executables"),(0,r.kt)("h3",{id:"add-a-function-definition"},"Add a function definition"),(0,r.kt)("h4",{id:"step-1-write-the-function-and-compress-it"},"Step 1: Write the function and compress it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"    cd examples/hello_world_function\n    zip -g hello_world.zip main.py\n")),(0,r.kt)("h4",{id:"step-2-upload-the-function-definition-to-sweep"},"Step 2: Upload the function definition to SWEEP"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\n    response = sweep_client.upload_function_def(\n        function_def_file='examples/hello_world_function/fdef_hello_world.json',\n        function_code_file='examples/hello_world_function/hello_world.zip',\n        user = user)\n\n    > {'status': 'OK', 'msg': 'Successfully uploaded function hello_world.'}\n\n")),(0,r.kt)("h3",{id:"add-a-container-definition"},"Add a container definition"),(0,r.kt)("h4",{id:"step-1-create-a-docker-image-and-compress-it"},"Step 1: Create a docker image and compress it"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:n(5774).Z},"hello_world.zip")," contains files for creating a simple docker image that prints 'hello world'."),(0,r.kt)("p",null,"This script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"cd hello_world\ndocker build --tag hello_world .\ndocker run hello_world; echo $?\ndocker save -o hello_world.tar hello_world:latest\n")),(0,r.kt)("p",null,"contains commands\nto build the image, run it locally and display its exit code, and compress it to a tar archive.\nPlease save this script as ",(0,r.kt)("strong",{parentName:"p"},"docker_cmds_hello_world.sh")," and run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ./docker_cmds_hello_world.sh\n\n> Sending build context to Docker daemon  3.072kB\n    .\n    .\n    .\n> Successfully built 832c75e88988\n> Successfully tagged hello_world:latest\n> Hello world!\n> 0\n")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"If you are using the SWEEP UI, you must still follow the above steps in creating the tar file using Docker. DO NOT use a zip file\nand DO NOT use 7-Zip to create the tar file.")),(0,r.kt)("h4",{id:"step-2-upload-the-container-definition-to-sweep"},"Step 2: Upload the container definition to SWEEP"),(0,r.kt)("p",null,"A container definition for the hello world image is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id" : "cdef_hello_world",\n  "destination_id" : "dest1",\n  "image_name": "hello_world",\n  "image_tag": "latest",\n  "cpu" : "0.25",\n  "memory" : "512"\n}\n')),(0,r.kt)("p",null,"Please save this JSON as ",(0,r.kt)("strong",{parentName:"p"},"_container_def_hello_world.json"),"."),(0,r.kt)("p",null,"Use the SWEEP-API to upload the container definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    container_def_file = 'examples/hello_world_container/_container_def_hello_world.json'\n    response = sweep_client.upload_container_def(\n        container_def_file='examples/hello_world_container/cdef_hello_world.json',\n        container_code_file='examples/hello_world_container/hello_world.tar',\n        user = user)\n\n    print(response)\n    > {'status': 'OK', 'msg': 'Started uploading image.'}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Make sure the images you push are such that they return the exit code 0 if they run successfully"),"\nThis is standard behaviour, but you can check the exit code of a container locally by running\nyour image and printing the environment variable ?, which contains the exit code of the latest run command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker run my_image; echo $?\n")))}u.isMDXComponent=!0},5774:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/files/hello_world-6b35c7196d7039851ec7ade2e5717241.zip"}}]);
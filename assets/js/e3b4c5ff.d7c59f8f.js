(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[263],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return f}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(t),f=r,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return t?o.createElement(m,i(i({ref:n},s),{},{components:t})):o.createElement(m,i({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},853:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return s},default:function(){return p}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),i=["components"],l={},c="Creating executables",d={unversionedId:"Code Examples/creating-executables",id:"Code Examples/creating-executables",isDocsHomePage:!1,title:"Creating executables",description:"Add a function definition",source:"@site/docs/Code Examples/creating-executables.md",sourceDirName:"Code Examples",slug:"/Code Examples/creating-executables",permalink:"/DocuSWEEP/Code Examples/creating-executables",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Code Examples/creating-executables.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add a workflow definition",permalink:"/DocuSWEEP/Code Examples/add-a-workflow-definition"},next:{title:"Launch and monitor the workflow",permalink:"/DocuSWEEP/Code Examples/launch-and-monitor-the-workflow"}},s=[{value:"Add a function definition",id:"add-a-function-definition",children:[]},{value:"Add a container definition",id:"add-a-container-definition",children:[]}],u={toc:s};function p(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"creating-executables"},"Creating executables"),(0,a.kt)("h3",{id:"add-a-function-definition"},"Add a function definition"),(0,a.kt)("h4",{id:"step-1-write-the-function-and-compress-it"},"Step 1: Write the function and compress it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"    cd examples/hello_world_function\n    zip -g hello_world.zip main.py\n")),(0,a.kt)("h4",{id:"step-2-upload-the-function-definition-to-sweep"},"Step 2: Upload the function definition to SWEEP"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"\n    response = sweep_client.upload_function_def(\n        function_def_file='examples/hello_world_function/fdef_hello_world.json',\n        function_code_file='examples/hello_world_function/hello_world.zip',\n        user = user)\n\n    > {'status': 'OK', 'msg': 'Successfully uploaded function hello_world.'}\n\n")),(0,a.kt)("h3",{id:"add-a-container-definition"},"Add a container definition"),(0,a.kt)("h4",{id:"step-1-create-a-docker-image-and-compress-it"},"Step 1: Create a docker image and compress it"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"examples/hello_world_container/hello_world"},"examples/hello_world_container/hello_world")," contains files for creating a simple docker image that prints 'hello world'."),(0,a.kt)("p",null,"The script ",(0,a.kt)("a",{parentName:"p",href:"examples/hello_world_container/docker_cmds_hello_world.sh"},"examples/hello_world_container/docker_cmds_hello_world.sh")," contains commands\nto build the image, run it locally and display its exit code, and compress it to a tar archive:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ./docker_cmds_hello_world.sh\n\n> Sending build context to Docker daemon  3.072kB\n    .\n    .\n    .\n> Successfully built 832c75e88988\n> Successfully tagged hello_world:latest\n> Hello world!\n> 0\n")),(0,a.kt)("h4",{id:"step-2-upload-the-container-definition-to-sweep"},"Step 2: Upload the container definition to SWEEP"),(0,a.kt)("p",null,"A container definition for the hello world image is in ",(0,a.kt)("a",{parentName:"p",href:"examples/hello_world_container/container_def_hello_world"},"examples/hello_world_container/container_def_hello_world.json"),"."),(0,a.kt)("p",null,"Use the SWEEP-API to upload the container definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"    container_def_file = 'examples/hello_world_container/container_def_hello_world.json'\n    response = sweep_client.upload_container_def(\n        container_def_file='examples/hello_world_container/cdef_hello_world.json',\n        container_code_file='examples/hello_world_container/hello_world.tar',\n        user = user)\n\n    print(response)\n    > {'status': 'OK', 'msg': 'Started uploading image.'}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Make sure the images you push are such that they return the exit code 0 if they run successfully"),"\nThis is standard behaviour, but you can check the exit code of a container locally by running\nyour image and printing the environment variable ?, which contains the exit code of the latest run command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"docker run my_image; echo $?\n")))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunksweep_docs_website=self.webpackChunksweep_docs_website||[]).push([[443],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,d=f["".concat(u,".").concat(m)]||f[m]||l[m]||a;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8273:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},frontMatterAssets:function(){return u},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return m}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},u=void 0,c="Outputs",p={unversionedId:"Communication Between Tasks/outputs",id:"Communication Between Tasks/outputs",isDocsHomePage:!1,title:"Outputs",description:"The output of a task is made available to its succesors in the variable predecessor_outputs. The contents of this dict depend on the workflow definition, as well as the task executable.",source:"@site/docs/Communication Between Tasks/outputs.md",sourceDirName:"Communication Between Tasks",slug:"/Communication Between Tasks/outputs",permalink:"/Communication Between Tasks/outputs",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Inputs",permalink:"/Communication Between Tasks/inputs"},next:{title:"Setting up the API",permalink:"/Code Examples/setting-up-the-api"}},l=[],f={toc:l};function m(e){var t=e.components,s=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"outputs"},"Outputs"),(0,a.kt)("p",null,"The output of a task is made available to its succesors in the variable ",(0,a.kt)("strong",{parentName:"p"},"predecessor_outputs"),". The contents of this dict depend on the workflow definition, as well as the task executable."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If a task has the ",(0,a.kt)("strong",{parentName:"p"},"static_output")," property set, this value will be stored in ",(0,a.kt)("strong",{parentName:"p"},"predecessor_outputs"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If the executable of the task has a return value, the contents of this are also be stored in ",(0,a.kt)("strong",{parentName:"p"},"predecessor_outputs"),"."))),(0,a.kt)("p",null,"Only function-based tasks have return values. The only requirement of the return value is that it is a dict."),(0,a.kt)("p",null,"See\n",(0,a.kt)("a",{target:"_blank",href:n(5585).Z},"lamba_function_template.py"),"\nfor an example of a function with a valid return value."),(0,a.kt)("p",null,"Containers do not have return values."),(0,a.kt)("p",null,"Container-based tasks behave just like function-based tasks in a workflow, except:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"They do not receive input (not from predecessors, not static input)."),(0,a.kt)("li",{parentName:"ol"},"They do not output anything to their successors."),(0,a.kt)("li",{parentName:"ol"},"Their status is defined by their exit code. This is the exit code of the docker container,\nwhich is the exit code of the command run inside the container. Exit code 0 means success.")))}m.isMDXComponent=!0},5585:function(e,t,n){t.Z=n.p+"assets/files/lambda_function_template-c36835e2be0005a7eee3f3846e19ca07.py"}}]);